---
# defaults file for ansible-docker

# Defines docker service name
docker_service_name: docker

# Defines if users defined in docker_users should be added to docker group
docker_config_users: false

# Defines users to be added to docker group to allow non sudo access to docker
docker_users: []
# - vagrant

# Defines if images defined in docker_images are pulled
docker_pull_images: false

# Defines docker images to be installed
docker_images: []
  # Defines image name
  # ex. docker hub image name
  # - centos
  # - elasticsearch
  # - fedora
  # - ubuntu

# Defines if docker service should be configured
docker_config_service: false

# Defines default file to be configured
docker_default_file: /etc/default/docker

# Defines daemon json file to be configured
docker_daemon_file: /etc/docker/daemon.json

# Defines just for docker_opts

# Defines swarm interface
docker_opt_swarm_interface: enp0s8

# Defines swarm address
docker_opt_swarm_addr: "{{ hostvars[inventory_hostname]['ansible_' + docker_opt_swarm_interface]['ipv4']['address'] }}"

# Defines interface to capture address from for docker_opt_cluster_addr
docker_opt_cluster_interface: "{{ docker_opt_swarm_interface }}"

# Defines address of cluster address
# Not the same as Swarm Cluster address
# Ex. Consul
docker_opt_cluster_addr: "{{ hostvars[inventory_hostname]['ansible_' + docker_opt_cluster_interface]['ipv4']['address'] }}"

# Defines address of cluster port
docker_opt_cluster_port: 2376

# Defines docker service options to be configured in /etc/docker/daemon.json
# Configure each option the same naming/format as the variables are set as at
# https://docs.docker.com/engine/reference/commandline/dockerd/
# The values are converted directly to proper JSON using the Jinja2 template
docker_opts:
  # Only define bridge or bip if you want to use either one of these
  # They cannot be used together
  # Specify network bridge IP
  # bip: 172.17.0.1/8
  # Attach containers to a network bridge
  # bridge: docker0
  # Address or interface name to advertise
  # cluster-advertise: "{{ docker_opt_cluster_addr }}:{{ docker_opt_cluster_port }}"
  # Set cluster store options
  # cluster-store: "consul://192.168.250.10:8500"
  # Enable debug mode
  debug: false
  # Container default gateway IPv4 address
  # default-gateway: 10.10.10.1
  # Default ulimits for containers
  # default-ulimit:
  #   - nofile: "64000:64000"
  # DNS server to use
  # dns:
  #   - 8.8.8.8
  #   - 8.8.4.4
  # DNS search domains to use
  # dns-search:
  #   - etsbv.internal
  #   - etsbv.test
  # Enable insecure registry communication
  # insecure-registries:
  #   - "gitlab.etsbv.internal:5000"
  # Default IP when binding container ports
  # ip: 0.0.0.0
  # Enable net.ipv4.ip_forward
  ip-forward: true
  # Enable IP masquerading
  ip-masq: true
  # Enable addition of iptables rules
  iptables: true
  # Set key=value labels to the daemon
  # label:
  #   - environment: test
  #   - datacenter: atlanta
  # Default driver for container logs
  # Default is json-file
  # log-driver: json-file
  # Fluentd log driver setup
  # log-driver: fluentd
  # log-opts:
  #   fluentd-address: "fluentdhost:24224"
  # fluentd-address: tcp://fluentdhost:24224
  # End of Fluentd log driver setup
  # GELF (Graylog) log driver setup
  # log-driver: egelf
  # log-opts:
  #   gelf-address: "udp://1.2.3.4:12201"
  #   tag: "{% raw %}{{.Name}}/{{.FullID}}{% endraw %}"
  #   labels: location
  #   env: TEST
  # End of GELF (Graylog) log driver setup
  # Splunk log driver setup
  # log-driver: splunk
  # log-opts:
  #   splunk-token: 176FCEBF-4CF5-4EDF-91BC-703796522D20
  #   splunk-url: "https://splunkhost:8088"
  #   splunk-capath: /path/to/cert/cacert.pem
  #   splunk-caname: SplunkServerDefaultCert
  #   tag: "{% raw %}{{.Name}}/{{.FullID}}{% endraw %}"
  #   labels: location
  #   env: TEST
  # End of Splunk log driver setup
  # Syslog log driver setup
  # log-driver: syslog
  # log-opts:
  # Define syslog address or leave commented out for logging to host local
  # syslog.
  # syslog-address: "udp://1.2.3.4:1111"
  # tag: "{% raw %}{{.Name}}/{{.FullID}}{% endraw %}"
  # labels: location
  # env: TEST
  # Set the logging level
  # log-level: info
  # Set the max concurrent downloads for each pull
  max-concurrent-downloads: 3
  # Set the max concurrent uploads for each push
  max-concurrent-uploads: 5
  # Set the containers network MTU
  # mtu: 1500
  # Enable selinux support
  selinux-enabled: false
  # Storage driver to use
  # aufs, devicemapper, btrfs, zfs, overlay and overlay2
  # storage-driver: aufs
  # Set default address or interface for swarm advertised address
  swarm-default-advertise-addr: "{{ docker_opt_swarm_addr }}"
  # Use TLS; implied by â€“tlsverify
  # tls: false

# Defines which repo to install from
# Stable gives you reliable updates every quarter
# Edge gives you new features every month
# define as stable or edge
docker_release_channel: stable

# Defines mapping between ansible architecture and docker architecture
docker_architecture_mapping:
  x86_64: x86_64
  aarch64: aarch64
  ppc64le: ppc64le
  s390x: s390x

# Defines docker package architecture
docker_architecture: "{{ docker_architecture_mapping[ansible_architecture] | default(ansible_architecture) }}"

# Defines alpine apk repo url for installing from
docker_alpine_apk_repo_url: "http://dl-cdn.alpinelinux.org/alpine/edge/community"

# Defines alpine apk package name for check exists
docker_alpine_apk_check_package: docker

# Defines alpine apk installing version package
docker_alpine_apk_present_versioned_packages:
  - "docker-{{ docker_version_alpine }}"

# Defines alpine apk installing latest package
docker_alpine_apk_present_latest_packages:
  - docker

# Defines debian apt pre-requisites package
docker_debian_apt_pre_reqs:
  - apt-transport-https
  - ca-certificates
  - curl
  - gnupg-agent
  - software-properties-common

# Defines debian apt removing package
docker_debian_apt_absent_packages:
  - containerd
  - docker
  - docker-engine
  - docker.io
  - lxc-docker
  - runc

# Define use apt or deb822 add docker repository
docker_debian_repo_type: apt

# Defines debian apt repo info for installing from
docker_debian_apt_repo_info:
  id: 0EBFCD88
  # keyserver: "hkp://p80.pool.sks-keyservers.net:80"
  repo: "deb [arch={{ docker_architecture }}] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} {{ docker_release_channel }}"
  url: "https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg"

# https://www.jeffgeerling.com/blog/2022/aptkey-deprecated-debianubuntu-how-fix-ansible
docker_debian_deb822_repo_info:
  uris: "https://download.docker.com/linux/{{ ansible_distribution | lower }}"
  suites: "{{ ansible_distribution_release }}"
  components: "{{ docker_release_channel }}"
  architectures: "{{ docker_architecture }}"
  signed_by: "https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg"

# Defines debian apt package name for check exists
docker_debian_apt_check_package: docker-ce

# Defines debian apt installing version package
docker_debian_apt_present_versioned_packages:
  - containerd.io
  - "docker-ce={{ docker_version_debian }}"

# Defines debian apt installing latest package
docker_debian_apt_present_latest_packages:
  - containerd.io
  - docker-ce

# Defines if docker memory limits should be added to grub boot loader
docker_debian_set_grub_memory_limit: true

# Defines redhat removing package
docker_redhat_package_absent_packages:
  - docker
  - docker-client
  - docker-client-latest
  - docker-common
  - docker-latest
  - docker-latest-logrotate
  - docker-logrotate
  - docker-engine
  - podman
  - runc

# Defines redhat yum package name for check exists
docker_redhat_yum_check_package: docker-ce

# Defines redhat yum distribution
docker_redhat_yum_distribution: "{{ ansible_distribution | lower }}"

# Defines redhat yum repo uri
docker_redhat_yum_repo_info:
  - key: docker-ce-stable
    name: "Docker CE Stable - $basearch"
    baseurl: https://download.docker.com/linux/{{ docker_redhat_yum_distribution }}/$releasever/$basearch/stable
    enabled: 1
    gpgcheck: 1
    gpgkey: "https://download.docker.com/linux/{{ docker_redhat_yum_distribution }}/gpg"

# Defines redhat installing version package
docker_redhat_package_present_versioned_packages:
  - containerd.io
  - "docker-ce-{{ docker_version_redhat }}"

# Defines redhat installing latest package
docker_redhat_package_present_latest_packages:
  - containerd.io
  - docker-ce

# Defines suse removing package
docker_suse_zypper_absent_packages: []

# Defines suse zypper repo info for installing from
docker_suse_zypper_repo_info: []
  # - repo: https://download.opensuse.org/repositories/security:/SELinux/openSUSE_Factory/security:SELinux.repo

# Defines suse zypper package name for check exists
docker_suse_zypper_check_package: docker

# Defines suse zypper installing version package
docker_suse_zypper_present_versioned_packages:
  - containerd.io
  - "docker-ce-{{ docker_version_suse }}"

# Defines suse zypper installing latest package
docker_suse_zypper_present_latest_packages:
  - docker

# Defines if Linux birdge-utils will get installed.
docker_install_bridge_utils: true

# Define Docker version to install
#
# 1.11.0|1.11.1|1.11.2|1.12.0|1.12.1|1.12.2|1.12.3|1.12.4|1.12.5|1.12.6|1.13.0|1.13.1
# 17.03.0|17.03.1|17.03.2|17.04.0|17.05.0|17.06.0|17.12.0|18.03.1
#
# You may also set docker_version to latest(default)
# Currently as of 06/03/2017 17.04.0 and 17.05.0 must be installed from the
# edge channel. Change docker_release_channel: 'edge'
#
# docker_version: 18.03.1
docker_version: latest

# Define OS-specific vars file for override default
# If enabled, some variables will be overridden by those in the `vars` path.
docker_os_specific_vars_included: true

# Define OS-specific vars path for override default
docker_os_specific_vars_path: "NONE"
